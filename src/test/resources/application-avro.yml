kafka:
  bootstrap-servers: ${spring.embedded.kafka.brokers}
spring:
  kafka:
    auto.offset.reset: earliest
    consumer:
      group-id: zenwave360-example
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        schema.registry.url: mock://not-used
      value-deserializer: io.zenwave360.example.boot.config.CustomKafkaAvroDeserializer
    producer:
      auto.register.schemas: true
      group-id: zenwave360-example
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        schema.registry.url: mock://not-used
      value-serializer: io.zenwave360.example.boot.config.CustomKafkaAvroSerializer
    properties:
      specific.avro.reader: true
  cloud:
    stream:
      function:
        definition: do-customer-request-avro;on-customer-event-avro
      bindings:
        do-customer-request-avro-out-0:
          group: zenwave360-example
          destination: customer.requests.avro
          content-type: application/*+avro
        do-customer-request-avro-in-0:
          group: zenwave360-example
          destination: customer.requests.avro
          content-type: application/*+avro

        on-customer-event-avro-out-0:
          group: zenwave360-example
          destination: customer.events.avro
          content-type: application/*+avro
        on-customer-event-avro-in-0:
          group: zenwave360-example.avro
          destination: customer.events.avro
          content-type: application/*+avro
