spring:
  kafka:
    properties:
      specific.avro.reader: true
    producer:
      auto.register.schemas: true
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  cloud:
    function:
      definition: do-customer-request-avro;on-customer-event-avro
    stream:
      bindings:
        do-customer-request-avro-out-0:
          group: zenwave360-example
          destination: customer.requests.avro
          content-type: application/*+avro
          producer.use-native-encoding: true
        do-customer-request-avro-in-0:
          group: zenwave360-example
          destination: customer.requests.avro
          content-type: application/*+avro
          consumer.use-native-decoding: true

        on-customer-event-avro-out-0:
          group: zenwave360-example
          destination: customer.events.avro
          content-type: application/*+avro
          producer.use-native-encoding: true
        on-customer-event-avro-in-0:
          group: zenwave360-example.avro
          destination: customer.events.avro
          content-type: application/*+avro
          consumer.use-native-decoding: true
#      kafka:
#        binder:
#          producer-properties:
#            key.serializer: org.apache.kafka.common.serialization.StringSerializer
