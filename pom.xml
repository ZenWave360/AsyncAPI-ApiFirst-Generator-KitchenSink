<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>io.github.zenwave360.examples</groupId>
	<artifactId>AsyncAPI-ApiFirst-Generator-KitchenSink</artifactId>
	<version>0.9.13-SNAPSHOT</version>
	<name>${project.groupId}:${project.artifactId}</name>

	<properties>
		<java.version>17</java.version>
		<spring-boot.version>2.7.0</spring-boot.version>
		<archunit-junit5.version>0.22.0</archunit-junit5.version>
		<mapstruct.version>1.5.3.Final</mapstruct.version>
		<spring-cloud.version>2021.0.3</spring-cloud.version>
		<avro.version>1.11.1</avro.version>
		<debezium.version>2.1.1.Final</debezium.version>
		<testcontainers.version>1.17.2</testcontainers.version>

		<zenwave.version>${project.version}</zenwave.version>

		<!-- Plugin versions -->
		<maven-clean-plugin.version>3.1.0</maven-clean-plugin.version>
		<maven-site-plugin.version>3.9.1</maven-site-plugin.version>
		<maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
		<maven-javadoc-plugin.version>3.3.1</maven-javadoc-plugin.version>
		<maven-eclipse-plugin.version>2.10</maven-eclipse-plugin.version>
		<maven-enforcer-plugin.version>3.0.0</maven-enforcer-plugin.version>
		<maven-failsafe-plugin.version>3.0.0-M5</maven-failsafe-plugin.version>
		<maven-idea-plugin.version>2.2.1</maven-idea-plugin.version>
		<maven-resources-plugin.version>3.2.0</maven-resources-plugin.version>
		<maven-surefire-plugin.version>3.0.0-M5</maven-surefire-plugin.version>
		<maven-war-plugin.version>3.3.2</maven-war-plugin.version>
		<maven-checkstyle-plugin.version>3.1.2</maven-checkstyle-plugin.version>
		<checkstyle.version>9.2</checkstyle.version>
		<nohttp-checkstyle.version>0.0.10</nohttp-checkstyle.version>
		<git-commit-id-plugin.version>5.0.0</git-commit-id-plugin.version>
		<modernizer-maven-plugin.version>2.3.0</modernizer-maven-plugin.version>
		<jacoco-maven-plugin.version>0.8.7</jacoco-maven-plugin.version>
		<jib-maven-plugin.version>3.1.4</jib-maven-plugin.version>
		<jib-maven-plugin.image>eclipse-temurin:11-jre-focal</jib-maven-plugin.image>
		<jib-maven-plugin.architecture>amd64</jib-maven-plugin.architecture>
		<lifecycle-mapping.version>1.0.0</lifecycle-mapping.version>
		<properties-maven-plugin.version>1.0.0</properties-maven-plugin.version>
	</properties>

	<repositories>
		<repository>
			<id>RedhatEA</id>
			<name>Redhat Early Access</name>
			<url>https://maven.repository.redhat.com/earlyaccess/all/</url>
		</repository>
	</repositories>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.testcontainers</groupId>
				<artifactId>testcontainers-bom</artifactId>
				<version>${testcontainers.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-stream-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-schema</artifactId>
			<version>2.2.1.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.avro</groupId>
			<artifactId>avro</artifactId>
			<version>${avro.version}</version>
		</dependency>


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>io.debezium</groupId>
			<artifactId>debezium-api</artifactId>
			<version>${debezium.version}</version>
		</dependency>
		<dependency>
			<groupId>io.debezium</groupId>
			<artifactId>debezium-core</artifactId>
			<version>${debezium.version}</version>
		</dependency>
		<dependency>
			<groupId>io.debezium</groupId>
			<artifactId>debezium-connector-mysql</artifactId>
			<version>${debezium.version}</version>
		</dependency>


		<dependency>
			<groupId>io.confluent</groupId>
			<artifactId>kafka-avro-serializer</artifactId>
			<version>5.3.0</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<scope>test</scope>
			<classifier>test-binder</classifier>
			<type>test-jar</type>
		</dependency>

		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>de.flapdoodle.embed</groupId>
			<artifactId>de.flapdoodle.embed.mongo</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.awaitility</groupId>
			<artifactId>awaitility</artifactId>
			<version>4.2.0</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin.version}</version>
					<configuration>
						<source>${java.version}</source>
						<target>${java.version}</target>
						<annotationProcessorPaths>
							<path>
								<groupId>org.springframework.boot</groupId>
								<artifactId>spring-boot-configuration-processor</artifactId>
								<version>${spring-boot.version}</version>
							</path>
							<path>
								<groupId>org.mapstruct</groupId>
								<artifactId>mapstruct-processor</artifactId>
								<version>${mapstruct.version}</version>
							</path>
						</annotationProcessorPaths>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>${maven-clean-plugin.version}</version>
				</plugin>
				<plugin>
					<artifactId>maven-site-plugin</artifactId>
					<version>${maven-site-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven-surefire-plugin.version}</version>
					<configuration>
						<!-- Force alphabetical order to have a reproducible build -->
						<runOrder>alphabetical</runOrder>
						<excludes>
							<exclude>**/*IT*</exclude>
							<exclude>**/*IntegrationTest*</exclude>
						</excludes>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>${maven-failsafe-plugin.version}</version>
					<configuration>
						<!-- Due to spring-boot repackage, without adding this property test classes are not found
                             See https://github.com/spring-projects/spring-boot/issues/6254 -->
						<classesDirectory>${project.build.outputDirectory}</classesDirectory>
						<!-- Force alphabetical order to have a reproducible build -->
						<runOrder>alphabetical</runOrder>
						<includes>
							<include>**/*IT*</include>
							<include>**/*IntegrationTest*</include>
						</includes>
					</configuration>
					<executions>
						<execution>
							<id>integration-test</id>
							<goals>
								<goal>integration-test</goal>
							</goals>
						</execution>
						<execution>
							<id>verify</id>
							<goals>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>


		<plugins>
			<plugin>
				<artifactId>maven-install-plugin</artifactId>
				<version>2.5.2</version>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>${maven-failsafe-plugin.version}</version>
				<configuration>
					<!-- Due to spring-boot repackage, without adding this property test classes are not found
                         See https://github.com/spring-projects/spring-boot/issues/6254 -->
					<classesDirectory>${project.build.outputDirectory}</classesDirectory>
					<!-- Force alphabetical order to have a reproducible build -->
					<runOrder>alphabetical</runOrder>
					<includes>
						<include>**/*IT*</include>
						<include>**/*IntegrationTest*</include>
					</includes>
				</configuration>
				<executions>
					<execution>
						<id>integration-test</id>
						<goals>
							<goal>integration-test</goal>
						</goals>
					</execution>
					<execution>
						<id>verify</id>
						<goals>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>io.github.zenwave360.zenwave-code-generator</groupId>
				<artifactId>zenwave-code-generator-maven-plugin</artifactId>
				<version>${zenwave.version}</version>
				<configuration>
					<addCompileSourceRoot>true</addCompileSourceRoot>
					<addTestCompileSourceRoot>true</addTestCompileSourceRoot>
					<includeProjectClasspath>true</includeProjectClasspath>
				</configuration>
				<executions>
					<!-- Generate DTOs -->
					<execution>
						<id>generate-asyncapi-with-one-dtos</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>jsonschema2pojo</generatorName>
							<inputSpec>${pom.basedir}/src/main/resources/model/asyncapi.yml</inputSpec>
							<configOptions>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-dtos-oneof</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>jsonschema2pojo</generatorName>
							<inputSpec>${pom.basedir}/src/main/resources/model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<!-- == IMPERATIVE == -->
					<!-- == IMPERATIVE / EXPOSE DTOs == -->
					<execution>
						<id>generate-asyncapi-with-one-imperative-json-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.json.dtos.streambridge.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-imperative-json-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.json.dtos.streambridge.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-imperative-json-envelope-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<useEnterpriseEnvelope>true</useEnterpriseEnvelope>
								<operationIds>onCustomerEvent</operationIds>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.json.dtos.envelope.streambridge.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-imperative-json-envelope-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<useEnterpriseEnvelope>true</useEnterpriseEnvelope>
								<operationIds>onCustomerEvent</operationIds>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.json.dtos.envelope.streambridge.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-imperative-json-deadletterqueue-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.json.dtos.deadletterqueue.streambridge.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-imperative-json-deadletterqueue-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.json.dtos.deadletterqueue.streambridge.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-imperative-json-outbox-mongodb-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.json.dtos.outbox.mongodb.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-imperative-json-outbox-mongodb-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.json.dtos.outbox.mongodb.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-imperative-json-outbox-jdbc-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.json.dtos.outbox.jdbc.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-imperative-json-outbox-jdbc-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.json.dtos.outbox.jdbc.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<!-- == IMPERATIVE / EXPOSE MESSAGES == -->
					<execution>
						<id>generate-asyncapi-with-one-imperative-json-expose-messages-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.json.messages.streambridge.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-imperative-json-expose-messages-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.json.messages.streambridge.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-imperative-json-expose-messages-outbox-mongodb-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.json.messages.outbox.mongodb.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-imperative-json-expose-messages-outbox-mongodb-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.json.messages.outbox.mongodb.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-imperative-json-expose-messages-outbox-jdbc-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.json.messages.outbox.jdbc.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-imperative-json-expose-messages-outbox-jdbc-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.json.messages.outbox.jdbc.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<!-- == REACTIVE == -->
					<!-- == REACTIVE / EXPOSE DTOs == -->
					<execution>
						<id>generate-asyncapi-with-one-reactive-json-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.json.dtos.streambridge.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-reactive-json-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.json.dtos.streambridge.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-reactive-json-outbox-mongodb-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.json.dtos.outbox.mongodb.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-reactive-json-outbox-mongodb-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.json.dtos.outbox.mongodb.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-reactive-json-outbox-jdbc-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.json.dtos.outbox.jdbc.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-reactive-json-outbox-jdbc-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.json.dtos.outbox.jdbc.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<!-- == REACTIVE / EXPOSE MESSAGES == -->
					<execution>
						<id>generate-asyncapi-with-one-reactive-json-expose-messages-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.json.messages.streambridge.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-reactive-json-expose-messages-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.json.messages.streambridge.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-reactive-json-expose-messages-outbox-mongodb-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.json.messages.outbox.mongodb.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-reactive-json-expose-messages-outbox-mongodb-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.json.messages.outbox.mongodb.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-reactive-json-expose-messages-outbox-jdbc-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.json.messages.outbox.jdbc.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-reactive-json-expose-messages-outbox-jdbc-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.json.messages.outbox.jdbc.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>


					<!-- == IMPERATIVE == avro == -->
					<!-- == IMPERATIVE / EXPOSE DTOs == avro == -->
					<execution>
						<id>generate-asyncapi-with-one-imperative-avro-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.avro.dtos.streambridge.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-imperative-avro-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.avro.dtos.streambridge.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-imperative-avro-envelope-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<useEnterpriseEnvelope>true</useEnterpriseEnvelope>
								<operationIds>onCustomerEventAvro</operationIds>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.avro.dtos.envelope.streambridge.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-imperative-avro-envelope-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<useEnterpriseEnvelope>true</useEnterpriseEnvelope>
								<operationIds>onCustomerEventAvro</operationIds>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.avro.dtos.envelope.streambridge.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>


					<execution>
						<id>generate-asyncapi-with-one-imperative-avro-outbox-mongodb-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.avro.dtos.outbox.mongodb.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-imperative-avro-outbox-mongodb-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.avro.dtos.outbox.mongodb.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-imperative-avro-outbox-jdbc-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.avro.dtos.outbox.jdbc.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-imperative-avro-outbox-jdbc-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.avro.dtos.outbox.jdbc.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<!-- == IMPERATIVE / EXPOSE MESSAGES == avro == -->
					<execution>
						<id>generate-asyncapi-with-one-imperative-avro-expose-messages-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.avro.messages.streambridge.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-imperative-avro-expose-messages-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.avro.messages.streambridge.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-imperative-avro-expose-messages-outbox-mongodb-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.avro.messages.outbox.mongodb.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-imperative-avro-expose-messages-outbox-mongodb-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.avro.messages.outbox.mongodb.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-imperative-avro-expose-messages-outbox-jdbc-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.avro.messages.outbox.jdbc.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-imperative-avro-expose-messages-outbox-jdbc-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.imperative.avro.messages.outbox.jdbc.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<!-- == REACTIVE == avro == -->
					<!-- == REACTIVE / EXPOSE DTOs == avro == -->
					<execution>
						<id>generate-asyncapi-with-one-reactive-avro-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.avro.dtos.streambridge.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-reactive-avro-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.avro.dtos.streambridge.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-reactive-avro-outbox-mongodb-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.avro.dtos.outbox.mongodb.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-reactive-avro-outbox-mongodb-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.avro.dtos.outbox.mongodb.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-reactive-avro-outbox-jdbc-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.avro.dtos.outbox.jdbc.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-reactive-avro-outbox-jdbc-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.avro.dtos.outbox.jdbc.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<!-- == REACTIVE / EXPOSE MESSAGES == avro == -->
					<execution>
						<id>generate-asyncapi-with-one-reactive-avro-expose-messages-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.avro.messages.streambridge.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-reactive-avro-expose-messages-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.avro.messages.streambridge.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-reactive-avro-expose-messages-outbox-mongodb-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.avro.messages.outbox.mongodb.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-reactive-avro-expose-messages-outbox-mongodb-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.avro.messages.outbox.mongodb.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-reactive-avro-expose-messages-outbox-jdbc-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.avro.messages.outbox.jdbc.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-reactive-avro-expose-messages-outbox-jdbc-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneMessage.reactive.avro.messages.outbox.jdbc.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneMessage.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<!-- == IMPERATIVE == ONE-OF -->
					<!-- == IMPERATIVE / EXPOSE DTOs == ONE-OF -->
					<execution>
						<id>generate-asyncapi-with-one-of-imperative-json-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.json.dtos.streambridge.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-imperative-json-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.json.dtos.streambridge.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-of-imperative-json-outbox-mongodb-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.json.dtos.outbox.mongodb.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-imperative-json-outbox-mongodb-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.json.dtos.outbox.mongodb.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-of-imperative-json-outbox-jdbc-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.json.dtos.outbox.jdbc.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-imperative-json-outbox-jdbc-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.json.dtos.outbox.jdbc.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<!-- == IMPERATIVE / EXPOSE MESSAGES == ONE-OF -->
					<execution>
						<id>generate-asyncapi-with-one-of-imperative-json-expose-messages-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.json.messages.streambridge.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-imperative-json-expose-messages-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.json.messages.streambridge.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-of-imperative-json-expose-messages-outbox-mongodb-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.json.messages.outbox.mongodb.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-imperative-json-expose-messages-outbox-mongodb-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.json.messages.outbox.mongodb.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-of-imperative-json-expose-messages-outbox-jdbc-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.json.messages.outbox.jdbc.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-imperative-json-expose-messages-outbox-jdbc-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.json.messages.outbox.jdbc.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<!-- == REACTIVE == ONE-OF -->
					<!-- == REACTIVE / EXPOSE DTOs == ONE-OF -->
					<execution>
						<id>generate-asyncapi-with-one-of-reactive-json-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.json.dtos.streambridge.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-reactive-json-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.json.dtos.streambridge.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-of-reactive-json-outbox-mongodb-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.json.dtos.outbox.mongodb.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-reactive-json-outbox-mongodb-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.json.dtos.outbox.mongodb.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-of-reactive-json-outbox-jdbc-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.json.dtos.outbox.jdbc.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-reactive-json-outbox-jdbc-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.json.dtos.outbox.jdbc.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<!-- == REACTIVE / EXPOSE MESSAGES == ONE-OF -->
					<execution>
						<id>generate-asyncapi-with-one-of-reactive-json-expose-messages-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.json.messages.streambridge.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-reactive-json-expose-messages-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.json.messages.streambridge.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-of-reactive-json-expose-messages-outbox-mongodb-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.json.messages.outbox.mongodb.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-reactive-json-expose-messages-outbox-mongodb-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.json.messages.outbox.mongodb.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-of-reactive-json-expose-messages-outbox-jdbc-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.json.messages.outbox.jdbc.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-reactive-json-expose-messages-outbox-jdbc-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-oneOf-messages.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.json.messages.outbox.jdbc.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>


					<!-- == IMPERATIVE == avro == ONE-OF -->
					<!-- == IMPERATIVE / EXPOSE DTOs == avro == ONE-OF -->
					<execution>
						<id>generate-asyncapi-with-one-of-imperative-avro-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.avro.dtos.streambridge.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-imperative-avro-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.avro.dtos.streambridge.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-of-imperative-avro-outbox-mongodb-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.avro.dtos.outbox.mongodb.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-imperative-avro-outbox-mongodb-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.avro.dtos.outbox.mongodb.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-of-imperative-avro-outbox-jdbc-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.avro.dtos.outbox.jdbc.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-imperative-avro-outbox-jdbc-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.avro.dtos.outbox.jdbc.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<!-- == IMPERATIVE / EXPOSE MESSAGES == avro == ONE-OF -->
					<execution>
						<id>generate-asyncapi-with-one-of-imperative-avro-expose-messages-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.avro.messages.streambridge.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-imperative-avro-expose-messages-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.avro.messages.streambridge.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-of-imperative-avro-expose-messages-outbox-mongodb-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.avro.messages.outbox.mongodb.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-imperative-avro-expose-messages-outbox-mongodb-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.avro.messages.outbox.mongodb.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-of-imperative-avro-expose-messages-outbox-jdbc-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.avro.messages.outbox.jdbc.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-imperative-avro-expose-messages-outbox-jdbc-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.imperative.avro.messages.outbox.jdbc.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<!-- == REACTIVE == avro == ONE-OF -->
					<!-- == REACTIVE / EXPOSE DTOs == avro == ONE-OF -->
					<execution>
						<id>generate-asyncapi-with-one-of-reactive-avro-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.avro.dtos.streambridge.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-reactive-avro-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.avro.dtos.streambridge.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-of-reactive-avro-outbox-mongodb-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.avro.dtos.outbox.mongodb.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-reactive-avro-outbox-mongodb-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.avro.dtos.outbox.mongodb.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-of-reactive-avro-outbox-jdbc-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.avro.dtos.outbox.jdbc.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-reactive-avro-outbox-jdbc-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.avro.dtos.outbox.jdbc.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<!-- == REACTIVE / EXPOSE MESSAGES == avro == ONE-OF -->
					<execution>
						<id>generate-asyncapi-with-one-of-reactive-avro-expose-messages-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.avro.messages.streambridge.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-reactive-avro-expose-messages-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.avro.messages.streambridge.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-of-reactive-avro-expose-messages-outbox-mongodb-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.avro.messages.outbox.mongodb.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-reactive-avro-expose-messages-outbox-mongodb-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.avro.messages.outbox.mongodb.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

					<execution>
						<id>generate-asyncapi-with-one-of-reactive-avro-expose-messages-outbox-jdbc-provider</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>reactive</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.avro.messages.outbox.jdbc.provider</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-with-one-of-reactive-avro-expose-messages-outbox-jdbc-client</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>classpath:model/asyncapi-avro.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>reactive</style>
								<transactionalOutbox>jdbc</transactionalOutbox>
								<exposeMessage>true</exposeMessage>
								<apiPackage>io.zenwave360.example.events.oneOfMessages.reactive.avro.messages.outbox.jdbc.client</apiPackage>
								<modelPackage>io.zenwave360.example.events.oneOfMessages.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>

				</executions>
				<dependencies>
					<dependency>
						<groupId>io.github.zenwave360.zenwave-code-generator.plugins</groupId>
						<artifactId>asyncapi-spring-cloud-streams3</artifactId>
						<version>${zenwave.version}</version>
					</dependency>
					<dependency>
						<groupId>io.github.zenwave360.zenwave-code-generator.plugins</groupId>
						<artifactId>asyncapi-jsonschema2pojo</artifactId>
						<version>${zenwave.version}</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.apache.avro</groupId>
				<artifactId>avro-maven-plugin</artifactId>
				<version>${avro.version}</version>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>schema</goal>
						</goals>
						<configuration>
							<sourceDirectory>src/main/resources/model/avro</sourceDirectory>
							<outputDirectory>target/generated-sources/avro/src/main/java</outputDirectory>
							<includes>
								<include>*.avsc</include>
							</includes>
							<imports>
								<import>${project.basedir}/src/main/resources/model/avro/RequestType.avsc</import>
								<import>${project.basedir}/src/main/resources/model/avro/EventType.avsc</import>
								<import>${project.basedir}/src/main/resources/model/avro/Customer.avsc</import>
							</imports>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>3.2.0</version>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${project.basedir}/target/generated-sources/avro/src/main/java/</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>


</project>
